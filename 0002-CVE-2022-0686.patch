From 4ac165a7db7f32c9b86868ac4d27d6e8d9b73754 Mon Sep 17 00:00:00 2001
From: Seal <info@sealsecurity.io>
Date: Tue, 30 Apr 2024 17:16:06 +0300
Subject: CVE-2022-0686

---
 index.js     | 13 +++++++++----
 test/test.js | 22 ++++++++++++++++++++++
 2 files changed, 31 insertions(+), 4 deletions(-)

diff --git a/index.js b/index.js
index 4f588fb..8e23267 100644
--- a/index.js
+++ b/index.js
@@ -36,7 +36,7 @@ var rules = [
   ['/', 'pathname'],                    // Extract from the back.
   ['@', 'auth', 1],                     // Extract from the front.
   [NaN, 'host', undefined, 1, 1],       // Set left over value.
-  [/:(\d+)$/, 'port', undefined, 1],    // RegExp the back.
+  [/:(\d*)$/, 'port', undefined, 1],    // RegExp the back.
   [NaN, 'hostname', undefined, 1, 1]    // Set left over.
 ];

@@ -431,6 +431,7 @@ function toString(stringify) {

   var query
     , url = this
+    , host = url.host
     , protocol = url.protocol;

   if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';
@@ -443,13 +444,17 @@ function toString(stringify) {
     result += '@';
   }

-  result += url.host + url.pathname;
+  //
+  // Trailing colon is removed from `url.host` when it is parsed. If it still
+  // ends with a colon, then add back the trailing colon that was removed. This
+  // prevents an invalid URL from being transformed into a valid one.
+  //
+  if (host[host.length - 1] === ':') host += ':';
+  result += host + url.pathname;

   query = 'object' === typeof url.query ? stringify(url.query) : url.query;
   if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;
-
   if (url.hash) result += url.hash;
-
   return result;
 }

diff --git a/test/test.js b/test/test.js
index 7bc322c..882e7aa 100644
--- a/test/test.js
+++ b/test/test.js
@@ -229,6 +229,28 @@ describe('url-parse', function () {
     assume(parsed.hostname).equals('');
   });

+  it('handles the case where the port is specified but empty', function () {
+    var parsed = parse('http://example.com:');
+
+    assume(parsed.protocol).equals('http:');
+    assume(parsed.port).equals('');
+    assume(parsed.host).equals('example.com');
+    assume(parsed.hostname).equals('example.com');
+    assume(parsed.pathname).equals('');
+    assume(parsed.origin).equals('http://example.com');
+    assume(parsed.href).equals('http://example.com');
+
+    parsed = parse('http://example.com::');
+
+    assume(parsed.protocol).equals('http:');
+    assume(parsed.port).equals('');
+    assume(parsed.host).equals('example.com:');
+    assume(parsed.hostname).equals('example.com:');
+    assume(parsed.pathname).equals('');
+    assume(parsed.origin).equals('http://example.com:');
+    assume(parsed.href).equals('http://example.com::');
+  });
+
   describe('origin', function () {
     it('generates an origin property', function () {
       var url = 'http://google.com:80/pathname'
--
2.39.3
